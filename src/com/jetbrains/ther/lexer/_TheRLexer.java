/* The following code was generated by JFlex 1.4.3 on 4/26/14 6:56 PM */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.ther.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/26/14 6:56 PM from the specification file
 * <tt>./TheR.flex</tt>
 */
class _TheRLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\26\1\0\1\0\1\6\22\0\1\27\1\74\1\25"+
    "\1\5\1\76\1\60\1\65\1\23\1\77\1\100\1\62\1\15\1\105"+
    "\1\70\1\2\1\61\1\4\7\7\2\7\1\63\1\106\1\67\1\73"+
    "\1\71\1\107\1\64\1\35\3\10\1\14\1\34\2\1\1\40\2\1"+
    "\1\21\1\1\1\37\1\1\1\17\1\1\1\32\1\36\1\31\1\33"+
    "\2\1\1\12\2\1\1\103\1\24\1\104\1\72\1\3\1\0\1\43"+
    "\1\56\1\47\1\10\1\13\1\42\1\45\1\52\1\22\1\1\1\57"+
    "\1\20\1\51\1\41\1\50\1\16\1\1\1\46\1\53\1\44\1\55"+
    "\1\1\1\54\1\11\2\1\1\101\1\66\1\102\1\75\53\0\1\1"+
    "\12\0\1\1\4\0\1\1\5\0\27\1\1\0\7\1\30\1\1\0"+
    "\10\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\2\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\2\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\2\1"+
    "\1\1\1\1\1\1\1\1\3\1\2\1\1\1\1\1\1\1\2\1"+
    "\1\1\3\1\2\1\4\1\1\1\2\1\1\1\3\1\3\1\2\1"+
    "\1\1\2\1\1\1\1\1\1\1\1\1\1\1\2\1\1\1\1\1"+
    "\2\1\1\1\1\1\2\1\1\1\3\1\1\1\1\1\1\1\2\1"+
    "\2\1\1\1\1\1\3\1\4\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\2\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\2\1\1\1\1\1"+
    "\1\1\1\1\1\1\3\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\7\1\2\1\1\1\2\1\2\1\1\1\1\1\4\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\105\1\1\1"+
    "\33\1\22\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1"+
    "\201\0\1\1\1\1\1\1\1\1\1\1\1\0\1\1\1\1\2\0"+
    "\1\1\3\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\1\1\21\1\1\0\11\1\43\1\1\1\2\1\3\1\3\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\5\1\1\1\1\1\1\0\1\1\1\1\2\1\2\1"+
    "\63\1\60\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\10\0\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\2\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\2\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\11\0\46\1\2\0\1\1\7\0\47\1\110\0"+
    "\33\1\5\0\3\1\55\0\40\1\1\1\12\1\43\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0"+
    "\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0"+
    "\1\1\3\0\1\1\27\0\31\1\253\0\66\1\3\0\1\1\22\0"+
    "\1\1\7\0\12\1\17\0\1\1\6\1\1\0\7\1\5\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1"+
    "\3\0\1\1\20\0\1\1\15\0\2\1\1\0\3\1\16\0\2\1"+
    "\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\23\0\3\1"+
    "\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1\43\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\3\0\1\1\36\0\2\1\1\0\3\1\17\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\26\0\1\1"+
    "\64\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\3\0\1\1\32\0\2\1\6\0\2\1\43\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1"+
    "\1\0\2\1\17\0\2\1\22\0\10\1\1\0\3\1\1\0\51\1"+
    "\2\0\1\1\20\0\1\1\21\0\2\1\30\0\6\1\5\0\22\1"+
    "\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1"+
    "\1\0\2\1\14\0\6\1\1\1\72\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\2\1\42\0"+
    "\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0"+
    "\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0"+
    "\3\1\4\0\15\1\14\0\1\1\21\0\46\1\12\0\53\1\1\0"+
    "\1\1\3\0\u0149\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1\1\0"+
    "\4\1\2\0\103\1\45\0\20\1\20\0\125\1\14\0\u026c\1\2\0"+
    "\21\1\1\0\32\1\5\0\113\1\3\0\3\1\17\0\15\1\1\0"+
    "\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1\17\0"+
    "\64\1\43\0\1\1\4\0\1\1\103\0\43\1\1\1\64\1\10\0"+
    "\51\1\1\0\1\1\5\0\106\1\12\0\35\1\63\0\36\1\2\0"+
    "\5\1\13\0\54\1\25\0\7\1\70\0\27\1\11\0\65\1\122\0"+
    "\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0\2\1\20\0"+
    "\46\1\32\0\44\1\51\0\3\1\12\0\36\1\6\1\153\0\4\1"+
    "\1\0\4\1\16\0\54\1\66\1\26\1\1\1\42\1\45\1\100\0"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\11\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\11\1\10\1\6\1"+
    "\2\0\6\1\2\0\10\1\10\1\10\1\10\1\6\1\2\0\6\1"+
    "\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\10\1\10\1\16\1\2\0\10\1\10\1\10\1\10\1\10\1\10\1"+
    "\5\1\1\0\2\1\4\1\1\1\1\0\1\1\3\0\3\1\1\0"+
    "\2\1\4\1\1\1\3\0\4\1\2\0\2\1\4\1\4\0\10\1"+
    "\5\1\5\0\3\1\1\0\2\1\4\1\1\1\164\0\1\1\15\0"+
    "\1\1\20\0\15\1\145\0\1\1\4\0\1\1\2\0\1\1\3\1"+
    "\2\1\3\1\1\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\1\0\1\1\4\1\1\1\4\1"+
    "\1\1\2\0\2\1\2\1\5\0\1\1\4\1\4\0\1\1\21\0"+
    "\43\1\1\1\1\1\4\1\u0a77\0\57\1\1\0\57\1\1\0\1\1"+
    "\1\1\3\1\2\1\1\1\1\1\1\1\1\1\1\1\1\1\4\1"+
    "\1\1\1\1\2\1\1\1\7\1\1\1\3\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\2\1\6\0\1\1\1\1\1\1"+
    "\1\1\21\0\46\1\12\0\66\1\11\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\1\1\1\1"+
    "\1\1\31\0\11\1\7\0\5\1\2\0\3\1\1\1\1\1\4\0"+
    "\126\1\6\0\2\1\1\1\1\0\132\1\1\0\3\1\1\1\5\0"+
    "\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0"+
    "\u51cc\1\64\0\25\1\1\1\u0477\1\103\0\50\1\6\1\2\0\u010c\1"+
    "\1\1\3\0\20\1\12\0\2\1\24\0\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\20\0\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\10\0"+
    "\106\1\12\1\47\0\11\1\2\0\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\3\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\10\1\1\1\1\1\1\1\1\1\2\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\2\0\1\1"+
    "\1\1\1\1\1\1\1\0\1\1\1\1\16\0\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\120\0\1\1\7\1"+
    "\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0\62\1"+
    "\76\0\6\1\3\0\1\1\16\0\34\1\12\0\27\1\31\0\35\1"+
    "\7\0\57\1\34\0\1\1\60\0\51\1\27\0\3\1\1\0\10\1"+
    "\24\0\20\1\1\1\6\1\3\0\1\1\5\0\60\1\1\0\1\1"+
    "\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\2\1"+
    "\1\1\43\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\1\0"+
    "\7\1\221\0\43\1\35\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0"+
    "\u012e\1\2\0\76\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\12\1\1\1\55\1\2\1\37\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\2"+
    "\1\6\1\2\2\7\1\10\1\11\1\12\11\2\1\1"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\2"+
    "\1\4\3\0\1\42\1\43\1\2\1\44\1\45\1\7"+
    "\2\0\3\2\1\46\10\2\4\0\1\47\2\0\1\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\4\1\0\5\2\1\64"+
    "\1\65\1\2\1\66\4\2\1\67\1\70\1\0\1\71"+
    "\1\72\1\73\1\74\1\75\1\0\1\76\1\77\1\2"+
    "\1\100\3\2\1\101\4\2\1\102\1\0\1\103\6\2"+
    "\1\104\1\105\5\2\1\106\6\2\1\107\2\2\1\110"+
    "\6\2\1\111\1\112\2\2\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\110\0\u0240\0\u0288\0\u02d0\0\110\0\110\0\110\0\u0318"+
    "\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558"+
    "\0\u05a0\0\110\0\110\0\u05e8\0\110\0\u0630\0\u0678\0\u06c0"+
    "\0\u0708\0\u0750\0\110\0\u0798\0\u07e0\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\u0828\0\u0870\0\110\0\110\0\110"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\110\0\110\0\u0a20"+
    "\0\220\0\220\0\110\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88"+
    "\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\110\0\u0f78\0\u0fc0"+
    "\0\110\0\110\0\110\0\u1008\0\110\0\110\0\u1050\0\110"+
    "\0\110\0\110\0\110\0\110\0\220\0\u1098\0\u10e0\0\u1128"+
    "\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\220\0\220\0\u12d8"+
    "\0\220\0\u1320\0\u1368\0\u13b0\0\u13f8\0\110\0\110\0\u1440"+
    "\0\110\0\110\0\110\0\110\0\110\0\u1488\0\220\0\220"+
    "\0\u14d0\0\220\0\u1518\0\u1560\0\u15a8\0\220\0\u15f0\0\u1638"+
    "\0\u1680\0\u16c8\0\110\0\u1710\0\220\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\220\0\220\0\u1908\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\220\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90"+
    "\0\u1bd8\0\220\0\u1c20\0\u1c68\0\220\0\u1cb0\0\u1cf8\0\u1d40"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\220\0\220\0\u1e60\0\u1ea8\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\3\3\1\10\1\3\1\11\4\3\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\17\1\20\2\3\1\21\2\3"+
    "\1\22\1\23\1\24\1\25\3\3\1\26\5\3\1\27"+
    "\1\3\1\30\1\3\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\111\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\27\3\31\0\1\3\1\61\1\3\1\62"+
    "\2\0\1\62\5\3\1\0\5\3\6\0\27\3\32\0"+
    "\1\62\1\0\1\63\2\0\1\63\1\0\2\64\2\65"+
    "\3\0\2\66\1\67\65\0\6\6\1\0\17\6\1\0"+
    "\61\6\2\0\1\62\1\0\1\7\2\0\1\7\3\0"+
    "\2\65\3\0\2\66\1\67\66\0\4\3\2\0\6\3"+
    "\1\0\2\3\1\70\2\3\6\0\27\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\10\3\1\71\1\72"+
    "\15\3\30\0\23\13\1\73\1\74\63\13\24\14\1\75"+
    "\1\73\62\14\1\0\4\3\2\0\6\3\1\0\5\3"+
    "\6\0\1\3\1\76\25\3\31\0\4\3\2\0\6\3"+
    "\1\0\5\3\6\0\4\3\1\77\22\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\2\3\1\100\1\3"+
    "\1\101\5\3\1\102\14\3\31\0\4\3\2\0\6\3"+
    "\1\0\5\3\6\0\10\3\1\103\16\3\31\0\4\3"+
    "\2\0\4\3\1\104\1\3\1\0\5\3\6\0\27\3"+
    "\31\0\4\3\2\0\6\3\1\0\5\3\6\0\17\3"+
    "\1\105\4\3\1\106\2\3\31\0\4\3\2\0\4\3"+
    "\1\107\1\3\1\0\5\3\6\0\27\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\21\3\1\110\5\3"+
    "\31\0\4\3\2\0\6\3\1\0\5\3\6\0\15\3"+
    "\1\111\11\3\31\0\1\112\6\0\1\112\1\113\3\112"+
    "\1\0\4\112\1\114\6\0\17\112\1\115\7\112\1\116"+
    "\1\117\1\120\110\0\1\121\111\0\1\122\110\0\1\123"+
    "\110\0\1\124\1\125\2\0\1\126\105\0\1\127\111\0"+
    "\1\130\107\0\1\131\107\0\1\132\117\0\1\133\110\0"+
    "\1\134\4\0\1\3\1\135\2\3\2\0\6\3\1\0"+
    "\5\3\6\0\27\3\34\0\1\62\2\0\1\62\3\0"+
    "\2\65\3\0\2\66\1\67\67\0\1\62\1\0\1\63"+
    "\2\0\1\63\3\0\2\65\5\0\1\67\71\0\1\136"+
    "\2\0\2\136\2\0\2\136\17\0\2\136\4\0\2\136"+
    "\3\0\1\136\6\0\1\136\35\0\1\137\2\0\1\137"+
    "\5\0\1\140\52\0\1\140\20\0\4\3\2\0\6\3"+
    "\1\0\5\3\6\0\22\3\1\141\4\3\30\0\110\13"+
    "\110\14\1\0\4\3\2\0\6\3\1\0\5\3\6\0"+
    "\2\3\1\142\24\3\31\0\4\3\2\0\6\3\1\0"+
    "\3\3\1\143\1\3\6\0\27\3\31\0\4\3\2\0"+
    "\6\3\1\0\3\3\1\144\1\3\6\0\27\3\31\0"+
    "\2\3\1\145\1\3\2\0\6\3\1\0\5\3\6\0"+
    "\27\3\31\0\4\3\2\0\6\3\1\0\5\3\6\0"+
    "\6\3\1\146\20\3\31\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\11\3\1\147\15\3\31\0\4\3\2\0"+
    "\2\3\1\150\3\3\1\0\5\3\6\0\27\3\31\0"+
    "\4\3\2\0\6\3\1\0\5\3\6\0\15\3\1\151"+
    "\11\3\31\0\4\3\2\0\6\3\1\0\5\3\6\0"+
    "\10\3\1\152\16\3\31\0\4\3\2\0\6\3\1\0"+
    "\1\153\4\3\6\0\27\3\31\0\4\3\2\0\6\3"+
    "\1\0\4\3\1\154\6\0\27\3\31\0\4\3\2\0"+
    "\4\3\1\155\1\3\1\0\5\3\6\0\27\3\31\0"+
    "\1\112\6\0\5\112\1\0\5\112\6\0\27\112\1\156"+
    "\30\0\1\112\6\0\5\112\1\0\5\112\6\0\27\112"+
    "\1\157\30\0\1\112\6\0\5\112\1\0\5\112\6\0"+
    "\10\112\1\160\16\112\1\156\30\0\1\112\6\0\5\112"+
    "\1\0\5\112\6\0\27\112\1\161\107\0\1\162\107\0"+
    "\1\163\117\0\1\164\110\0\1\165\20\0\1\166\1\0"+
    "\1\136\2\0\2\136\2\0\2\136\1\0\2\65\2\66"+
    "\12\0\2\136\4\0\2\136\3\0\1\136\6\0\1\136"+
    "\35\0\1\137\2\0\1\137\10\0\2\66\1\67\71\0"+
    "\1\137\2\0\1\137\101\0\4\3\2\0\4\3\1\167"+
    "\1\3\1\0\5\3\6\0\27\3\31\0\4\3\2\0"+
    "\5\3\1\170\1\0\5\3\6\0\27\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\5\3\1\171\21\3"+
    "\31\0\4\3\2\0\6\3\1\0\3\3\1\172\1\3"+
    "\6\0\27\3\31\0\4\3\2\0\6\3\1\0\4\3"+
    "\1\173\6\0\15\3\1\174\1\175\10\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\13\3\1\176\13\3"+
    "\31\0\4\3\2\0\6\3\1\0\5\3\6\0\16\3"+
    "\1\177\10\3\31\0\4\3\2\0\4\3\1\200\1\3"+
    "\1\0\5\3\6\0\27\3\31\0\4\3\2\0\6\3"+
    "\1\0\2\3\1\201\2\3\6\0\27\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\12\3\1\202\14\3"+
    "\31\0\1\112\6\0\5\112\1\0\5\112\6\0\27\112"+
    "\1\203\33\0\1\204\2\0\1\204\101\0\4\3\2\0"+
    "\5\3\1\205\1\0\5\3\6\0\27\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\10\3\1\206\16\3"+
    "\31\0\4\3\2\0\4\3\1\207\1\3\1\0\5\3"+
    "\6\0\27\3\31\0\4\3\2\0\6\3\1\0\5\3"+
    "\6\0\17\3\1\210\1\3\1\211\5\3\31\0\4\3"+
    "\2\0\6\3\1\0\5\3\6\0\13\3\1\212\13\3"+
    "\31\0\4\3\2\0\6\3\1\0\5\3\6\0\12\3"+
    "\1\213\14\3\31\0\4\3\2\0\4\3\1\214\1\3"+
    "\1\0\5\3\6\0\27\3\31\0\4\3\2\0\6\3"+
    "\1\0\5\3\6\0\26\3\1\215\34\0\1\204\2\0"+
    "\1\204\6\0\2\65\71\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\13\3\1\216\13\3\31\0\4\3\2\0"+
    "\6\3\1\0\5\3\6\0\12\3\1\217\14\3\31\0"+
    "\4\3\2\0\6\3\1\0\5\3\6\0\20\3\1\220"+
    "\6\3\31\0\4\3\2\0\6\3\1\0\5\3\6\0"+
    "\12\3\1\221\14\3\31\0\4\3\2\0\6\3\1\0"+
    "\4\3\1\222\6\0\27\3\31\0\4\3\2\0\6\3"+
    "\1\0\5\3\6\0\13\3\1\223\13\3\31\0\4\3"+
    "\2\0\4\3\1\224\1\3\1\0\5\3\6\0\27\3"+
    "\31\0\4\3\2\0\6\3\1\0\2\3\1\225\2\3"+
    "\6\0\27\3\31\0\4\3\2\0\6\3\1\0\1\226"+
    "\4\3\6\0\27\3\31\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\15\3\1\227\11\3\31\0\4\3\2\0"+
    "\6\3\1\0\5\3\6\0\17\3\1\230\7\3\31\0"+
    "\4\3\2\0\6\3\1\0\5\3\6\0\14\3\1\231"+
    "\12\3\31\0\2\3\1\232\1\3\2\0\6\3\1\0"+
    "\5\3\6\0\27\3\31\0\4\3\2\0\6\3\1\0"+
    "\2\3\1\233\2\3\6\0\27\3\31\0\4\3\2\0"+
    "\6\3\1\0\5\3\6\0\12\3\1\234\14\3\31\0"+
    "\4\3\2\0\6\3\1\0\5\3\6\0\10\3\1\235"+
    "\16\3\31\0\4\3\2\0\4\3\1\236\1\3\1\0"+
    "\5\3\6\0\27\3\31\0\4\3\2\0\4\3\1\237"+
    "\1\3\1\0\5\3\6\0\27\3\31\0\4\3\2\0"+
    "\6\3\1\0\5\3\6\0\16\3\1\240\10\3\31\0"+
    "\4\3\2\0\6\3\1\0\5\3\6\0\15\3\1\241"+
    "\11\3\31\0\4\3\2\0\2\3\1\242\3\3\1\0"+
    "\5\3\6\0\27\3\31\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\13\3\1\243\13\3\31\0\2\3\1\244"+
    "\1\3\2\0\6\3\1\0\5\3\6\0\27\3\31\0"+
    "\2\3\1\245\1\3\2\0\6\3\1\0\5\3\6\0"+
    "\27\3\31\0\4\3\2\0\4\3\1\246\1\3\1\0"+
    "\5\3\6\0\27\3\31\0\4\3\2\0\6\3\1\0"+
    "\5\3\6\0\15\3\1\247\11\3\31\0\2\3\1\250"+
    "\1\3\2\0\6\3\1\0\5\3\6\0\27\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\3\1\3\11\12\1\2\11"+
    "\1\1\1\11\5\1\1\11\2\1\6\11\2\1\3\11"+
    "\2\1\3\0\2\11\3\1\1\11\2\0\14\1\4\0"+
    "\1\11\2\0\3\11\1\0\2\11\1\1\5\11\3\1"+
    "\1\0\15\1\2\11\1\0\5\11\1\0\14\1\1\11"+
    "\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _TheRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _TheRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return TheRTokenTypes.MODULUS;
          }
        case 76: break;
        case 20: 
          { return TheRTokenTypes.EXP;
          }
        case 77: break;
        case 73: 
          { return TheRTokenTypes.NA_INTEGER_KEYWORD;
          }
        case 78: break;
        case 50: 
          { return TheRTokenTypes.RDBRACKET;
          }
        case 79: break;
        case 31: 
          { return TheRTokenTypes.COMMA;
          }
        case 80: break;
        case 45: 
          { return TheRTokenTypes.RIGHT_ASSIGN;
          }
        case 81: break;
        case 56: 
          { return TheRTokenTypes.KRONECKER_PROD;
          }
        case 82: break;
        case 64: 
          { return TheRTokenTypes.NULL_KEYWORD;
          }
        case 83: break;
        case 40: 
          { return TheRTokenTypes.COLONCOLON;
          }
        case 84: break;
        case 5: 
          { return TheRTokenTypes.END_OF_LINE_COMMENT;
          }
        case 85: break;
        case 41: 
          { return TheRTokenTypes.ANDAND;
          }
        case 86: break;
        case 46: 
          { return TheRTokenTypes.GE;
          }
        case 87: break;
        case 2: 
          { return TheRTokenTypes.IDENTIFIER;
          }
        case 88: break;
        case 69: 
          { return TheRTokenTypes.BREAK_KEYWORD;
          }
        case 89: break;
        case 36: 
          { return TheRTokenTypes.IN_KEYWORD;
          }
        case 90: break;
        case 15: 
          { return TheRTokenTypes.AND;
          }
        case 91: break;
        case 62: 
          { return TheRTokenTypes.ELSE_KEYWORD;
          }
        case 92: break;
        case 21: 
          { return TheRTokenTypes.EQ;
          }
        case 93: break;
        case 38: 
          { return TheRTokenTypes.NA_KEYWORD;
          }
        case 94: break;
        case 65: 
          { return TheRTokenTypes.NEXT_KEYWORD;
          }
        case 95: break;
        case 35: 
          { return TheRTokenTypes.COMPLEX_LITERAL;
          }
        case 96: break;
        case 53: 
          { return TheRTokenTypes.INF_KEYWORD;
          }
        case 97: break;
        case 54: 
          { return TheRTokenTypes.FOR_KEYWORD;
          }
        case 98: break;
        case 7: 
          { return TheRTokenTypes.STRING_LITERAL;
          }
        case 99: break;
        case 61: 
          { return TheRTokenTypes.RIGHT_COMPLEX_ASSING;
          }
        case 100: break;
        case 55: 
          { return TheRTokenTypes.INFIX_OP;
          }
        case 101: break;
        case 26: 
          { return TheRTokenTypes.RPAR;
          }
        case 102: break;
        case 10: 
          { return TheRTokenTypes.TAB;
          }
        case 103: break;
        case 57: 
          { return TheRTokenTypes.OUTER_PROD;
          }
        case 104: break;
        case 32: 
          { return TheRTokenTypes.SEMICOLON;
          }
        case 105: break;
        case 68: 
          { return TheRTokenTypes.WHILE_KEYWORD;
          }
        case 106: break;
        case 75: 
          { return TheRTokenTypes.NA_CHARACTER_KEYWORD;
          }
        case 107: break;
        case 23: 
          { return TheRTokenTypes.TILDE;
          }
        case 108: break;
        case 72: 
          { return TheRTokenTypes.FUNCTION_KEYWORD;
          }
        case 109: break;
        case 11: 
          { return TheRTokenTypes.DIV;
          }
        case 110: break;
        case 25: 
          { return TheRTokenTypes.LPAR;
          }
        case 111: break;
        case 17: 
          { return TheRTokenTypes.LT;
          }
        case 112: break;
        case 42: 
          { return TheRTokenTypes.OROR;
          }
        case 113: break;
        case 59: 
          { return TheRTokenTypes.MATRIX_PROD;
          }
        case 114: break;
        case 18: 
          { return TheRTokenTypes.MINUS;
          }
        case 115: break;
        case 48: 
          { return TheRTokenTypes.NOTEQ;
          }
        case 116: break;
        case 3: 
          { return TheRTokenTypes.DOT;
          }
        case 117: break;
        case 34: 
          { return TheRTokenTypes.INTEGER_LITERAL;
          }
        case 118: break;
        case 71: 
          { return TheRTokenTypes.NA_REAL_KEYWORD;
          }
        case 119: break;
        case 58: 
          { return TheRTokenTypes.INT_DIV;
          }
        case 120: break;
        case 51: 
          { return TheRTokenTypes.TRIPLE_DOTS;
          }
        case 121: break;
        case 60: 
          { return TheRTokenTypes.LEFT_COMPLEX_ASSING;
          }
        case 122: break;
        case 52: 
          { return TheRTokenTypes.NAN_KEYWORD;
          }
        case 123: break;
        case 74: 
          { return TheRTokenTypes.NA_COMPLEX_KEYWORD;
          }
        case 124: break;
        case 19: 
          { return TheRTokenTypes.GT;
          }
        case 125: break;
        case 9: 
          { return TheRTokenTypes.SPACE;
          }
        case 126: break;
        case 63: 
          { return TheRTokenTypes.TRUE_KEYWORD;
          }
        case 127: break;
        case 28: 
          { return TheRTokenTypes.RBRACE;
          }
        case 128: break;
        case 30: 
          { return TheRTokenTypes.RBRACKET;
          }
        case 129: break;
        case 66: 
          { return TheRTokenTypes.MATCHING;
          }
        case 130: break;
        case 16: 
          { return TheRTokenTypes.OR;
          }
        case 131: break;
        case 8: 
          { return TheRTokenTypes.LINE_BREAK;
          }
        case 132: break;
        case 70: 
          { return TheRTokenTypes.REPEAT_KEYWORD;
          }
        case 133: break;
        case 12: 
          { return TheRTokenTypes.MULT;
          }
        case 134: break;
        case 49: 
          { return TheRTokenTypes.LDBRACKET;
          }
        case 135: break;
        case 43: 
          { return TheRTokenTypes.LEFT_ASSIGN;
          }
        case 136: break;
        case 13: 
          { return TheRTokenTypes.COLON;
          }
        case 137: break;
        case 6: 
          { return TheRTokenTypes.PLUS;
          }
        case 138: break;
        case 22: 
          { return TheRTokenTypes.NOT;
          }
        case 139: break;
        case 14: 
          { return TheRTokenTypes.AT;
          }
        case 140: break;
        case 27: 
          { return TheRTokenTypes.LBRACE;
          }
        case 141: break;
        case 4: 
          { return TheRTokenTypes.NUMERIC_LITERAL;
          }
        case 142: break;
        case 47: 
          { return TheRTokenTypes.EQEQ;
          }
        case 143: break;
        case 37: 
          { return TheRTokenTypes.IF_KEYWORD;
          }
        case 144: break;
        case 24: 
          { return TheRTokenTypes.LIST_SUBSET;
          }
        case 145: break;
        case 1: 
          { return TheRTokenTypes.BAD_CHARACTER;
          }
        case 146: break;
        case 67: 
          { return TheRTokenTypes.FALSE_KEYWORD;
          }
        case 147: break;
        case 29: 
          { return TheRTokenTypes.LBRACKET;
          }
        case 148: break;
        case 33: 
          { return TheRTokenTypes.HELP;
          }
        case 149: break;
        case 44: 
          { return TheRTokenTypes.LE;
          }
        case 150: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
