/* The following code was generated by JFlex 1.4.3 on 4/24/14 6:41 PM */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.ther.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/24/14 6:41 PM from the specification file
 * <tt>./TheR.flex</tt>
 */
class _TheRLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\24\1\0\1\0\1\7\22\0\1\25\1\55\1\0"+
    "\1\6\1\72\1\64\1\70\1\0\1\74\1\75\1\61\1\16\1\102"+
    "\1\54\1\2\1\62\1\4\11\10\1\60\1\103\1\65\1\67\1\66"+
    "\1\57\1\73\1\33\3\11\1\14\1\32\2\1\1\36\2\1\1\21"+
    "\1\1\1\35\1\1\1\17\1\1\1\30\1\34\1\27\1\31\2\1"+
    "\1\12\2\1\1\76\1\0\1\77\1\63\1\1\1\0\1\41\1\52"+
    "\1\50\1\11\1\15\1\40\1\1\1\46\1\23\1\1\1\53\1\22"+
    "\1\1\1\37\1\51\1\20\1\1\1\43\1\42\1\44\1\47\1\1"+
    "\1\45\1\13\2\1\1\100\1\71\1\101\1\56\53\0\1\3\12\0"+
    "\1\3\4\0\1\3\5\0\27\3\1\0\7\3\30\3\1\0\10\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3"+
    "\1\3\1\3\1\3\3\3\2\3\1\3\1\3\1\3\2\3\1\3"+
    "\3\3\2\3\4\3\1\3\2\3\1\3\3\3\3\3\2\3\1\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\2\3"+
    "\1\3\1\3\2\3\1\3\3\3\1\3\1\3\1\3\2\3\2\3"+
    "\1\3\1\3\3\3\4\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3"+
    "\1\3\1\3\3\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\7\3\2\3\1\3\2\3\2\3\1\3\1\3\4\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\105\3\1\3\33\3"+
    "\22\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0"+
    "\160\5\1\3\1\3\1\3\1\3\1\3\1\0\1\3\1\3\2\0"+
    "\1\3\3\3\10\0\1\3\1\0\3\3\1\0\1\3\1\0\2\3"+
    "\1\3\21\3\1\0\11\3\43\3\1\3\2\3\3\3\3\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\5\3\1\3\1\3\1\0\1\3\1\3\2\3\2\3"+
    "\63\3\60\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\0\5\5\2\0\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\11\0\46\3\2\0\1\3\7\0"+
    "\47\3\11\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\10\0\33\3\5\0\3\3\35\0\13\5\5\0\40\3\1\3"+
    "\12\3\25\5\12\5\4\0\2\3\1\5\143\3\1\0\1\3\7\5"+
    "\2\0\6\5\2\3\2\5\1\0\4\5\2\3\12\5\3\3\2\0"+
    "\1\3\20\0\1\3\1\5\36\3\33\5\2\0\131\3\13\5\1\3"+
    "\16\0\12\5\41\3\11\5\2\3\4\0\1\3\5\0\26\3\4\5"+
    "\1\3\11\5\1\3\3\5\1\3\5\5\22\0\31\3\3\5\244\0"+
    "\3\5\1\5\66\3\1\5\1\5\1\5\1\3\3\5\10\5\4\5"+
    "\1\5\2\5\1\3\7\5\12\3\2\5\2\0\12\5\1\0\1\3"+
    "\6\3\1\0\7\3\1\0\1\5\2\5\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\5"+
    "\1\3\3\5\4\5\2\0\2\5\2\0\2\5\1\5\1\3\10\0"+
    "\1\5\4\0\2\3\1\0\3\3\2\5\2\0\12\5\2\3\17\0"+
    "\2\5\1\5\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\5\1\0\3\5"+
    "\2\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\3\1\0"+
    "\1\3\7\0\12\5\2\5\3\3\1\5\13\0\2\5\1\5\1\0"+
    "\11\3\1\0\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\5\3\2\0\1\5\1\3\3\5\5\5\1\0\2\5\1\5\1\0"+
    "\2\5\1\5\2\0\1\3\17\0\2\3\2\5\2\0\12\5\21\0"+
    "\1\5\2\5\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\2\3\1\0\5\3\2\0\1\5\1\3\1\5\1\5\1\5"+
    "\4\5\2\0\2\5\2\0\2\5\1\5\10\0\1\5\1\5\4\0"+
    "\2\3\1\0\3\3\2\5\2\0\12\5\1\0\1\3\20\0\1\5"+
    "\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0"+
    "\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0"+
    "\2\5\1\5\2\5\3\0\3\5\1\0\3\5\1\5\2\0\1\3"+
    "\6\0\1\5\16\0\12\5\21\0\3\5\1\0\10\3\1\0\3\3"+
    "\1\0\27\3\1\0\12\3\1\0\5\3\3\0\1\3\3\5\4\5"+
    "\1\0\3\5\1\0\4\5\7\0\2\5\1\0\2\3\6\0\2\3"+
    "\2\5\2\0\12\5\22\0\2\5\1\0\10\3\1\0\3\3\1\0"+
    "\27\3\1\0\12\3\1\0\5\3\2\0\1\5\1\3\1\5\1\5"+
    "\5\5\1\0\1\5\2\5\1\0\2\5\2\5\7\0\2\5\7\0"+
    "\1\3\1\0\2\3\2\5\2\0\12\5\1\0\2\3\17\0\2\5"+
    "\1\0\10\3\1\0\3\3\1\0\51\3\2\0\1\3\3\5\4\5"+
    "\1\0\3\5\1\0\3\5\1\5\1\3\10\0\1\5\10\0\2\3"+
    "\2\5\2\0\12\5\12\0\6\3\2\0\2\5\1\0\22\3\3\0"+
    "\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\5\4\0"+
    "\3\5\3\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\3"+
    "\1\5\2\3\7\5\5\0\6\3\1\3\10\5\1\0\12\5\47\0"+
    "\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0"+
    "\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0"+
    "\2\3\1\0\4\3\1\5\2\3\6\5\1\0\2\5\1\3\2\0"+
    "\5\3\1\0\1\3\1\0\6\5\2\0\12\5\2\0\2\3\42\0"+
    "\1\3\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\3\1\0\44\3\4\0\16\5\1\5\5\5"+
    "\1\0\2\5\5\3\13\5\1\0\44\5\11\0\1\5\71\0\53\3"+
    "\2\5\4\5\1\5\6\5\1\5\2\5\2\5\2\5\1\3\12\5"+
    "\6\0\6\3\2\5\2\5\4\3\3\5\1\3\3\5\2\3\7\5"+
    "\3\3\4\5\15\3\1\5\2\5\2\5\6\5\1\5\1\3\1\5"+
    "\12\5\3\5\1\5\2\0\46\3\12\0\53\3\1\0\1\3\3\0"+
    "\u0149\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0"+
    "\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0\4\3\2\0"+
    "\103\3\2\0\3\5\40\0\20\3\20\0\125\3\14\0\u026c\3\2\0"+
    "\21\3\1\0\32\3\5\0\113\3\3\0\3\3\17\0\15\3\1\0"+
    "\4\3\3\5\13\0\22\3\3\5\13\0\22\3\2\5\14\0\15\3"+
    "\1\0\3\3\1\0\2\5\14\0\64\3\2\0\1\5\7\5\10\5"+
    "\1\5\2\5\13\5\3\0\1\3\4\0\1\3\1\5\2\0\12\5"+
    "\41\0\3\5\2\0\12\5\6\0\43\3\1\3\64\3\10\0\51\3"+
    "\1\5\1\3\5\0\106\3\12\0\35\3\3\0\3\5\4\5\2\5"+
    "\3\5\4\0\2\5\1\5\6\5\3\5\12\0\12\5\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\5\7\3\2\5\6\0\12\5\46\0"+
    "\27\3\2\5\3\5\4\0\65\3\1\5\1\5\1\5\7\5\1\0"+
    "\1\5\1\5\1\5\2\5\10\5\6\5\12\5\2\0\1\5\12\5"+
    "\6\0\12\5\15\0\1\3\130\0\4\5\1\5\57\3\1\5\1\5"+
    "\5\5\1\5\1\5\5\5\1\5\2\5\7\3\4\0\12\5\21\0"+
    "\11\5\14\0\2\5\1\5\36\3\1\5\4\5\2\5\2\5\1\5"+
    "\3\0\2\3\12\5\6\0\46\3\1\5\1\5\2\5\3\5\1\5"+
    "\1\5\3\5\2\5\14\0\44\3\10\5\10\5\2\5\2\5\10\0"+
    "\12\5\3\0\3\3\12\5\36\3\6\3\122\0\3\5\1\0\15\5"+
    "\1\5\7\5\4\3\1\5\4\3\1\5\15\0\54\3\66\3\26\3"+
    "\1\3\42\3\45\3\47\5\25\0\4\5\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\11\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\11\3\10\3\6\3\2\0\6\3\2\0\10\3"+
    "\10\3\10\3\10\3\6\3\2\0\6\3\2\0\10\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\10\3\10\3\16\3\2\0"+
    "\10\3\10\3\10\3\10\3\10\3\10\3\5\3\1\0\2\3\4\3"+
    "\1\3\1\0\1\3\3\0\3\3\1\0\2\3\4\3\1\3\3\0"+
    "\4\3\2\0\2\3\4\3\4\0\10\3\5\3\5\0\3\3\1\0"+
    "\2\3\4\3\1\3\102\0\2\5\23\0\1\5\34\0\1\3\15\0"+
    "\1\3\20\0\15\3\63\0\15\5\4\0\1\5\3\0\14\5\21\0"+
    "\1\3\4\0\1\3\2\0\1\3\3\3\2\3\3\3\1\3\1\0"+
    "\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\0\1\3\4\3\1\3\4\3\1\3\2\0\2\3\2\3"+
    "\5\0\1\3\4\3\4\0\1\3\21\0\43\3\1\3\1\3\4\3"+
    "\u0a77\0\57\3\1\0\57\3\1\0\1\3\1\3\3\3\2\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\4\3\1\3\1\3\2\3\1\3"+
    "\7\3\1\3\3\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\2\3\6\0\1\3\1\3\1\3\1\3\3\5\16\0\46\3"+
    "\12\0\66\3\11\0\1\3\17\0\1\5\27\3\11\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\40\5\57\0\1\3\u01d5\0\1\3\1\3"+
    "\1\3\31\0\11\3\6\5\1\0\5\3\2\0\3\3\1\3\1\3"+
    "\4\0\126\3\2\0\2\5\2\0\2\3\1\3\1\0\132\3\1\0"+
    "\3\3\1\3\5\0\51\3\3\0\136\3\21\0\33\3\65\0\20\3"+
    "\u0200\0\u19b6\3\112\0\u51cc\3\64\0\25\3\1\3\u0477\3\103\0\50\3"+
    "\6\3\2\0\u010c\3\1\3\3\0\20\3\12\5\2\3\24\0\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\5\14\0\2\5\1\0"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\10\0\106\3\12\3\2\5\45\0"+
    "\11\3\2\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\3\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\10\3"+
    "\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\2\0\1\3\1\3\1\3\1\3"+
    "\1\0\1\3\1\3\16\0\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\120\0\1\3\7\3\1\5\3\3\1\5"+
    "\4\3\1\5\27\3\2\5\2\5\1\5\30\0\64\3\14\0\2\5"+
    "\62\3\20\5\1\5\13\0\12\5\6\0\22\5\6\3\3\0\1\3"+
    "\4\0\12\5\34\3\10\5\2\0\27\3\13\5\2\5\14\0\35\3"+
    "\3\0\3\5\1\5\57\3\1\5\2\5\4\5\2\5\1\5\4\5"+
    "\16\0\1\3\12\5\46\0\51\3\6\5\2\5\2\5\2\5\2\5"+
    "\11\0\3\3\1\5\10\3\1\5\1\5\2\0\12\5\6\0\20\3"+
    "\1\3\6\3\3\0\1\3\1\5\4\0\60\3\1\5\1\3\3\5"+
    "\2\3\2\5\5\3\2\5\1\3\1\5\1\3\30\0\2\3\1\3"+
    "\43\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3"+
    "\221\0\43\3\2\5\1\5\2\5\1\5\2\5\1\0\1\5\1\5"+
    "\2\0\12\5\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0\u012e\3"+
    "\2\0\76\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3"+
    "\1\5\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3"+
    "\50\0\14\3\4\0\20\5\20\0\7\5\14\0\2\5\30\0\3\5"+
    "\40\0\5\3\1\0\207\3\23\0\12\5\7\0\32\3\4\0\1\5"+
    "\1\0\32\3\13\0\12\3\1\3\55\3\2\3\37\3\3\0\6\3"+
    "\2\0\6\3\2\0\6\3\2\0\3\3\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\2"+
    "\1\6\1\2\1\7\1\10\1\11\11\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\1\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\4"+
    "\3\0\1\42\1\43\1\2\1\44\1\45\3\2\1\46"+
    "\10\2\1\47\1\50\1\51\4\0\1\52\1\53\1\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\2\4\1\0"+
    "\4\2\1\62\1\63\2\2\1\64\3\2\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\1\0\1\72\1\73\1\2"+
    "\1\74\1\75\4\2\1\76\1\0\1\77\2\2\1\100"+
    "\1\101\1\2\1\102\1\2\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\104\0\u0220\0\104\0\104\0\104\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\104\0\104\0\u0550\0\104\0\104\0\104\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\104\0\104\0\u0880\0\210\0\210"+
    "\0\u08c4\0\u0908\0\u094c\0\210\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\104\0\104\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u0cc0\0\104\0\104\0\u0d04\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\210\0\210\0\u0f24\0\u0f68\0\210"+
    "\0\u0fac\0\u0ff0\0\u1034\0\104\0\u1078\0\104\0\104\0\104"+
    "\0\104\0\u10bc\0\210\0\210\0\u1100\0\210\0\210\0\u1144"+
    "\0\u1188\0\u11cc\0\u1210\0\104\0\u1254\0\210\0\u1298\0\u12dc"+
    "\0\210\0\210\0\u1320\0\210\0\u1364\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\2\1\6\1\2"+
    "\1\7\4\3\1\10\1\11\4\3\1\12\1\13\1\14"+
    "\1\15\1\16\2\3\1\17\2\3\1\20\1\21\1\22"+
    "\1\23\2\3\1\24\1\3\1\25\4\3\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\105\0\5\3\2\0\6\3\1\0\5\3\3\0\25\3"+
    "\31\0\1\3\1\57\1\0\1\60\3\0\1\60\5\3"+
    "\1\0\5\3\3\0\25\3\32\0\1\60\1\0\1\61"+
    "\3\0\1\61\1\0\2\62\2\63\3\0\2\64\1\65"+
    "\60\0\7\6\1\0\14\6\1\0\57\6\2\0\1\60"+
    "\1\0\1\7\3\0\1\7\3\0\2\63\3\0\2\64"+
    "\1\65\61\0\5\3\2\0\6\3\1\0\3\3\1\66"+
    "\1\3\3\0\25\3\31\0\5\3\2\0\6\3\1\0"+
    "\5\3\3\0\10\3\1\67\1\70\13\3\31\0\5\3"+
    "\2\0\6\3\1\0\5\3\3\0\1\3\1\71\23\3"+
    "\31\0\5\3\2\0\6\3\1\0\5\3\3\0\4\3"+
    "\1\72\20\3\31\0\5\3\2\0\6\3\1\0\5\3"+
    "\3\0\2\3\1\73\1\3\1\74\5\3\1\75\12\3"+
    "\31\0\5\3\2\0\6\3\1\0\5\3\3\0\10\3"+
    "\1\76\14\3\31\0\5\3\2\0\5\3\1\77\1\0"+
    "\5\3\3\0\25\3\31\0\5\3\2\0\6\3\1\0"+
    "\5\3\3\0\20\3\1\100\1\3\1\101\2\3\31\0"+
    "\5\3\2\0\5\3\1\102\1\0\5\3\3\0\25\3"+
    "\31\0\5\3\2\0\6\3\1\0\5\3\3\0\17\3"+
    "\1\103\5\3\31\0\5\3\2\0\6\3\1\0\5\3"+
    "\3\0\14\3\1\104\10\3\116\0\1\105\104\0\1\106"+
    "\74\0\1\107\46\0\1\110\25\0\1\111\7\0\1\112"+
    "\1\113\1\0\1\114\73\0\1\115\10\0\1\116\1\0"+
    "\1\117\103\0\1\120\103\0\1\121\104\0\1\122\104\0"+
    "\1\123\14\0\1\124\105\0\1\60\3\0\1\60\3\0"+
    "\2\63\3\0\2\64\1\65\62\0\1\60\1\0\1\61"+
    "\3\0\1\61\3\0\2\63\5\0\1\65\64\0\1\125"+
    "\3\0\2\125\2\0\2\125\14\0\2\125\4\0\2\125"+
    "\6\0\1\125\1\0\1\125\35\0\1\126\3\0\1\126"+
    "\5\0\1\127\35\0\1\127\30\0\5\3\2\0\6\3"+
    "\1\0\5\3\3\0\13\3\1\130\11\3\31\0\5\3"+
    "\2\0\6\3\1\0\5\3\3\0\2\3\1\131\22\3"+
    "\31\0\5\3\2\0\6\3\1\0\2\3\1\132\2\3"+
    "\3\0\25\3\31\0\5\3\2\0\6\3\1\0\2\3"+
    "\1\133\2\3\3\0\25\3\31\0\5\3\2\0\6\3"+
    "\1\0\5\3\3\0\6\3\1\134\16\3\31\0\5\3"+
    "\2\0\6\3\1\0\5\3\3\0\11\3\1\135\13\3"+
    "\31\0\5\3\2\0\3\3\1\136\2\3\1\0\5\3"+
    "\3\0\25\3\31\0\5\3\2\0\6\3\1\0\5\3"+
    "\3\0\10\3\1\137\14\3\31\0\5\3\2\0\6\3"+
    "\1\0\5\3\3\0\14\3\1\140\10\3\31\0\5\3"+
    "\2\0\6\3\1\0\1\3\1\141\3\3\3\0\25\3"+
    "\31\0\5\3\2\0\6\3\1\0\4\3\1\142\3\0"+
    "\25\3\31\0\5\3\2\0\5\3\1\143\1\0\5\3"+
    "\3\0\25\3\116\0\1\144\54\0\1\145\130\0\1\146"+
    "\103\0\1\147\103\0\1\150\73\0\1\151\31\0\1\152"+
    "\1\0\1\125\3\0\2\125\2\0\2\125\1\0\2\63"+
    "\2\64\7\0\2\125\4\0\2\125\6\0\1\125\1\0"+
    "\1\125\35\0\1\126\3\0\1\126\10\0\2\64\1\65"+
    "\64\0\1\126\3\0\1\126\74\0\5\3\2\0\5\3"+
    "\1\153\1\0\5\3\3\0\25\3\31\0\5\3\2\0"+
    "\4\3\1\154\1\3\1\0\5\3\3\0\25\3\31\0"+
    "\5\3\2\0\6\3\1\0\5\3\3\0\5\3\1\155"+
    "\17\3\31\0\5\3\2\0\6\3\1\0\2\3\1\156"+
    "\2\3\3\0\25\3\31\0\5\3\2\0\6\3\1\0"+
    "\5\3\3\0\15\3\1\157\7\3\31\0\5\3\2\0"+
    "\6\3\1\0\5\3\3\0\21\3\1\160\3\3\31\0"+
    "\5\3\2\0\5\3\1\161\1\0\5\3\3\0\25\3"+
    "\31\0\5\3\2\0\6\3\1\0\3\3\1\162\1\3"+
    "\3\0\25\3\31\0\5\3\2\0\6\3\1\0\5\3"+
    "\3\0\12\3\1\163\12\3\114\0\1\164\23\0\1\165"+
    "\3\0\1\165\74\0\5\3\2\0\4\3\1\166\1\3"+
    "\1\0\5\3\3\0\25\3\31\0\5\3\2\0\6\3"+
    "\1\0\5\3\3\0\15\3\1\167\7\3\31\0\5\3"+
    "\2\0\6\3\1\0\5\3\3\0\12\3\1\170\12\3"+
    "\31\0\5\3\2\0\5\3\1\171\1\0\5\3\3\0"+
    "\25\3\31\0\5\3\2\0\6\3\1\0\5\3\3\0"+
    "\24\3\1\172\34\0\1\165\3\0\1\165\6\0\2\63"+
    "\64\0\5\3\2\0\6\3\1\0\4\3\1\173\3\0"+
    "\25\3\31\0\5\3\2\0\6\3\1\0\5\3\3\0"+
    "\15\3\1\174\7\3\31\0\5\3\2\0\6\3\1\0"+
    "\5\3\3\0\22\3\1\175\2\3\31\0\5\3\2\0"+
    "\6\3\1\0\5\3\3\0\10\3\1\176\14\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\3\11\13\1\2\11"+
    "\1\1\3\11\6\1\12\11\2\1\3\0\2\11\20\1"+
    "\2\11\4\0\2\11\1\0\6\11\2\1\1\0\14\1"+
    "\1\11\1\0\4\11\1\0\11\1\1\11\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _TheRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _TheRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4674) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return TheRTokenTypes.NAN_KEYWORD;
          }
        case 68: break;
        case 4: 
          { return TheRTokenTypes.NUMERIC_LITERAL;
          }
        case 69: break;
        case 61: 
          { return TheRTokenTypes.NEXT_KEYWORD;
          }
        case 70: break;
        case 57: 
          { return TheRTokenTypes.LEFT_COMPLEX_ASSING;
          }
        case 71: break;
        case 24: 
          { return TheRTokenTypes.AT;
          }
        case 72: break;
        case 33: 
          { return TheRTokenTypes.DOUBLE_DOTS;
          }
        case 73: break;
        case 22: 
          { return TheRTokenTypes.OR;
          }
        case 74: break;
        case 15: 
          { return TheRTokenTypes.MULT;
          }
        case 75: break;
        case 45: 
          { return TheRTokenTypes.GTEQ;
          }
        case 76: break;
        case 53: 
          { return TheRTokenTypes.RIGHT_COMPLEX_ASSING;
          }
        case 77: break;
        case 12: 
          { return TheRTokenTypes.TILDE;
          }
        case 78: break;
        case 58: 
          { return TheRTokenTypes.ELSE_KEYWORD;
          }
        case 79: break;
        case 2: 
          { return TheRTokenTypes.IDENTIFIER;
          }
        case 80: break;
        case 13: 
          { return TheRTokenTypes.HELP;
          }
        case 81: break;
        case 63: 
          { return TheRTokenTypes.FALSE_KEYWORD;
          }
        case 82: break;
        case 36: 
          { return TheRTokenTypes.IN_KEYWORD;
          }
        case 83: break;
        case 17: 
          { return TheRTokenTypes.EXP;
          }
        case 84: break;
        case 25: 
          { return TheRTokenTypes.LPAR;
          }
        case 85: break;
        case 62: 
          { return TheRTokenTypes.MATCHING;
          }
        case 86: break;
        case 51: 
          { return TheRTokenTypes.INF_KEYWORD;
          }
        case 87: break;
        case 8: 
          { return TheRTokenTypes.SPACE;
          }
        case 88: break;
        case 1: 
          { return TheRTokenTypes.BAD_CHARACTER;
          }
        case 89: break;
        case 19: 
          { return TheRTokenTypes.GT;
          }
        case 90: break;
        case 66: 
          { return TheRTokenTypes.REPEAT_KEYWORD;
          }
        case 91: break;
        case 43: 
          { return TheRTokenTypes.LEFT_ASSIGN;
          }
        case 92: break;
        case 31: 
          { return TheRTokenTypes.COMMA;
          }
        case 93: break;
        case 34: 
          { return TheRTokenTypes.INTEGER_LITERAL;
          }
        case 94: break;
        case 49: 
          { return TheRTokenTypes.TRIPLE_DOTS;
          }
        case 95: break;
        case 46: 
          { return TheRTokenTypes.EQEQ;
          }
        case 96: break;
        case 39: 
          { return TheRTokenTypes.RIGHT_ASSIGN;
          }
        case 97: break;
        case 28: 
          { return TheRTokenTypes.RBRACKET;
          }
        case 98: break;
        case 32: 
          { return TheRTokenTypes.SEMICOLON;
          }
        case 99: break;
        case 14: 
          { return TheRTokenTypes.COLON;
          }
        case 100: break;
        case 42: 
          { return TheRTokenTypes.MODULUS;
          }
        case 101: break;
        case 3: 
          { return TheRTokenTypes.DOT;
          }
        case 102: break;
        case 20: 
          { return TheRTokenTypes.EQ;
          }
        case 103: break;
        case 37: 
          { return TheRTokenTypes.IF_KEYWORD;
          }
        case 104: break;
        case 29: 
          { return TheRTokenTypes.LBRACE;
          }
        case 105: break;
        case 16: 
          { return TheRTokenTypes.DIV;
          }
        case 106: break;
        case 30: 
          { return TheRTokenTypes.RBRACE;
          }
        case 107: break;
        case 26: 
          { return TheRTokenTypes.RPAR;
          }
        case 108: break;
        case 9: 
          { return TheRTokenTypes.TAB;
          }
        case 109: break;
        case 52: 
          { return TheRTokenTypes.FOR_KEYWORD;
          }
        case 110: break;
        case 55: 
          { return TheRTokenTypes.MATRIX_PROD;
          }
        case 111: break;
        case 48: 
          { return TheRTokenTypes.OROR;
          }
        case 112: break;
        case 47: 
          { return TheRTokenTypes.ANDAND;
          }
        case 113: break;
        case 21: 
          { return TheRTokenTypes.AND;
          }
        case 114: break;
        case 11: 
          { return TheRTokenTypes.NOT;
          }
        case 115: break;
        case 40: 
          { return TheRTokenTypes.NOTEQ;
          }
        case 116: break;
        case 60: 
          { return TheRTokenTypes.NULL_KEYWORD;
          }
        case 117: break;
        case 38: 
          { return TheRTokenTypes.NA_KEYWORD;
          }
        case 118: break;
        case 41: 
          { return TheRTokenTypes.COLONCOLON;
          }
        case 119: break;
        case 54: 
          { return TheRTokenTypes.OUTER_PROD;
          }
        case 120: break;
        case 44: 
          { return TheRTokenTypes.LTEQ;
          }
        case 121: break;
        case 59: 
          { return TheRTokenTypes.TRUE_KEYWORD;
          }
        case 122: break;
        case 18: 
          { return TheRTokenTypes.LT;
          }
        case 123: break;
        case 5: 
          { return TheRTokenTypes.END_OF_LINE_COMMENT;
          }
        case 124: break;
        case 65: 
          { return TheRTokenTypes.BREAK_KEYWORD;
          }
        case 125: break;
        case 35: 
          { return TheRTokenTypes.COMPLEX_LITERAL;
          }
        case 126: break;
        case 10: 
          { return TheRTokenTypes.MINUS;
          }
        case 127: break;
        case 64: 
          { return TheRTokenTypes.WHILE_KEYWORD;
          }
        case 128: break;
        case 56: 
          { return TheRTokenTypes.INT_DIV;
          }
        case 129: break;
        case 6: 
          { return TheRTokenTypes.PLUS;
          }
        case 130: break;
        case 27: 
          { return TheRTokenTypes.LBRACKET;
          }
        case 131: break;
        case 67: 
          { return TheRTokenTypes.FUNCTION_KEYWORD;
          }
        case 132: break;
        case 7: 
          { return TheRTokenTypes.LINE_BREAK;
          }
        case 133: break;
        case 23: 
          { return TheRTokenTypes.LIST_SUBSET;
          }
        case 134: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
